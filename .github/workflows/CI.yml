name: CI
on:
  push:
    branches: [ master ]
    paths-ignore:
      - '**.md'
      - 'LICENSE'
  pull_request:
    types: [opened, synchronize]
    paths-ignore:
      - '**.md'
      - 'LICENSE'

jobs:
  linux:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'ci skip')"
    strategy:
      fail-fast: false
      matrix:
        mem_check:
#          - ENABLE_VALGRIND
#          - ENABLE_SANITIZERS
          - NONE_MEM_CHECK
        compiler:
#          - GCC
          - CLANG
    steps:
    - uses: actions/checkout@v2
    - name: install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install clang-14 valgrind
    - name: build and test
      shell: bash
      run: |
          EVENT_CMAKE_OPTIONS=()
          EVENT_CMAKE_OPTIONS+=("-DCMAKE_C_FLAGS='--coverage -O0'")
          
          if [ "NONE_MEM_CHECK" == "ENABLE_VALGRIND" ]; then
            EVENT_CMAKE_OPTIONS+=("-DENABLE_CJSON_UTILS=ON" "-DENABLE_VALGRIND=ON" "-DENABLE_SAFE_STACK=ON" "-DENABLE_SANITIZERS=OFF")
          elif [ "NONE_MEM_CHECK" == "ENABLE_SANITIZERS" ]; then
            EVENT_CMAKE_OPTIONS+=("-DENABLE_CJSON_UTILS=ON" "-DENABLE_VALGRIND=OFF" "-DENABLE_SAFE_STACK=OFF" "-DENABLE_SANITIZERS=ON")
          else
            EVENT_CMAKE_OPTIONS+=("-DENABLE_CJSON_UTILS=ON" "-DENABLE_VALGRIND=OFF" "-DENABLE_SAFE_STACK=OFF" "-DENABLE_SANITIZERS=OFF")
          fi
          if [ "${{ matrix.compiler }}" == "GCC" ]; then
            export CC=gcc
          else
            export CC=clang
          fi
          
          #export CFLAGS="--coverage -O0"
          #export CXXFLAGS="--coverage -O0"
          
          #run build and test
          JOBS=20
          export CTEST_PARALLEL_LEVEL=$JOBS
          export CTEST_OUTPUT_ON_FAILURE=1
          mkdir -p build
          cd build
          echo [cmake]: cmake .. "${EVENT_CMAKE_OPTIONS[@]}"
          cmake .. "${EVENT_CMAKE_OPTIONS[@]}" -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/install || (rm -rf * && cmake .. $EVENT_CMAKE_OPTIONS -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/install)
          cmake --build .
          make test
          cmake --install .
          
    - name: 'ApiCov'
      uses: codesa-ai/ApiCov@v0.3.10-pre
      with:
        root_path: ${{ github.workspace }}
        api_key: ${{ secrets.APICOV_KEY }}
        install_path: ${{ github.workspace }}/install
